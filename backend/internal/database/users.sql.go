// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package database

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, first_name, last_name, email, hashed_password)
VALUES (
  gen_random_uuid(),
  $1,
  $2,
  $3,
  $4
)
RETURNING id, first_name, last_name, email, is_admin
`

type CreateUserParams struct {
	FirstName      string
	LastName       string
	Email          string
	HashedPassword string
}

type CreateUserRow struct {
	ID        uuid.UUID
	FirstName string
	LastName  string
	Email     string
	IsAdmin   bool
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.HashedPassword,
	)
	var i CreateUserRow
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.IsAdmin,
	)
	return i, err
}

const deleteUserById = `-- name: DeleteUserById :exec
DELETE FROM users where id = $1
`

func (q *Queries) DeleteUserById(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteUserById, id)
	return err
}

const getAllUsers = `-- name: GetAllUsers :many
SELECT id, first_name, last_name, email, is_admin FROM users ORDER BY first_name
`

type GetAllUsersRow struct {
	ID        uuid.UUID
	FirstName string
	LastName  string
	Email     string
	IsAdmin   bool
}

func (q *Queries) GetAllUsers(ctx context.Context) ([]GetAllUsersRow, error) {
	rows, err := q.db.Query(ctx, getAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllUsersRow
	for rows.Next() {
		var i GetAllUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.Email,
			&i.IsAdmin,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, first_name, last_name, email, is_admin, hashed_password from users where email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.IsAdmin,
		&i.HashedPassword,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, first_name, last_name, email, is_admin FROM users where id = $1
`

type GetUserByIdRow struct {
	ID        uuid.UUID
	FirstName string
	LastName  string
	Email     string
	IsAdmin   bool
}

func (q *Queries) GetUserById(ctx context.Context, id uuid.UUID) (GetUserByIdRow, error) {
	row := q.db.QueryRow(ctx, getUserById, id)
	var i GetUserByIdRow
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.IsAdmin,
	)
	return i, err
}

const getUserFromRefreshToken = `-- name: GetUserFromRefreshToken :one
SELECT id, first_name, last_name, email, is_admin, hashed_password, token, created_at, updated_at, user_id, expires_at, revoked_at
FROM users 
JOIN refresh_tokens ON users.id = refresh_tokens.user_id
where refresh_tokens.token = $1
`

type GetUserFromRefreshTokenRow struct {
	ID             uuid.UUID
	FirstName      string
	LastName       string
	Email          string
	IsAdmin        bool
	HashedPassword string
	Token          string
	CreatedAt      pgtype.Timestamp
	UpdatedAt      pgtype.Timestamp
	UserID         uuid.UUID
	ExpiresAt      pgtype.Timestamp
	RevokedAt      pgtype.Timestamp
}

func (q *Queries) GetUserFromRefreshToken(ctx context.Context, token string) (GetUserFromRefreshTokenRow, error) {
	row := q.db.QueryRow(ctx, getUserFromRefreshToken, token)
	var i GetUserFromRefreshTokenRow
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.IsAdmin,
		&i.HashedPassword,
		&i.Token,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.ExpiresAt,
		&i.RevokedAt,
	)
	return i, err
}

const getUserStats = `-- name: GetUserStats :one
SELECT 
  (SELECT COUNT(*) FROM users) as total_users,
  (SELECT COUNT(DISTINCT users.id) FROM users
   JOIN reservations on users.id = reservations.user_id) as users_with_reservations
`

type GetUserStatsRow struct {
	TotalUsers            int64
	UsersWithReservations int64
}

func (q *Queries) GetUserStats(ctx context.Context) (GetUserStatsRow, error) {
	row := q.db.QueryRow(ctx, getUserStats)
	var i GetUserStatsRow
	err := row.Scan(&i.TotalUsers, &i.UsersWithReservations)
	return i, err
}

const setAdmin = `-- name: SetAdmin :exec
UPDATE users
SET is_admin = $1
WHERE id = $2
`

type SetAdminParams struct {
	IsAdmin bool
	ID      uuid.UUID
}

func (q *Queries) SetAdmin(ctx context.Context, arg SetAdminParams) error {
	_, err := q.db.Exec(ctx, setAdmin, arg.IsAdmin, arg.ID)
	return err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users 
SET first_name = COALESCE(NULLIF($1, ''), first_name),
    last_name = COALESCE(NULLIF($2, ''), last_name),
    email = COALESCE(NULLIF($3, ''), email)
WHERE id = $4
RETURNING id, first_name, last_name, email
`

type UpdateUserParams struct {
	Column1 interface{}
	Column2 interface{}
	Column3 interface{}
	ID      uuid.UUID
}

type UpdateUserRow struct {
	ID        uuid.UUID
	FirstName string
	LastName  string
	Email     string
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (UpdateUserRow, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.Column1,
		arg.Column2,
		arg.Column3,
		arg.ID,
	)
	var i UpdateUserRow
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
	)
	return i, err
}
