// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, first_name, last_name, email)
VALUES (
  gen_random_uuid(),
  $1,
  $2,
  $3
)
RETURNING id, first_name, last_name, email, is_admin
`

type CreateUserParams struct {
	FirstName string
	LastName  string
	Email     string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.FirstName, arg.LastName, arg.Email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.IsAdmin,
	)
	return i, err
}

const deleteUserById = `-- name: DeleteUserById :exec
DELETE FROM users where id = $1
`

func (q *Queries) DeleteUserById(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteUserById, id)
	return err
}

const getAllUsers = `-- name: GetAllUsers :many
SELECT id, first_name, last_name, email, is_admin FROM users ORDER BY first_name
`

func (q *Queries) GetAllUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, getAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.Email,
			&i.IsAdmin,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserById = `-- name: GetUserById :one
SELECT id, first_name, last_name, email, is_admin FROM users where id = $1
`

func (q *Queries) GetUserById(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.IsAdmin,
	)
	return i, err
}

const setAdmin = `-- name: SetAdmin :one
UPDATE users
SET is_admin = $1
WHERE id = $2
RETURNING id, first_name, last_name, email, is_admin
`

type SetAdminParams struct {
	IsAdmin bool
	ID      uuid.UUID
}

func (q *Queries) SetAdmin(ctx context.Context, arg SetAdminParams) (User, error) {
	row := q.db.QueryRow(ctx, setAdmin, arg.IsAdmin, arg.ID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.IsAdmin,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users 
SET first_name = COALESCE(NULLIF($1, ''), first_name),
    last_name = COALESCE(NULLIF($2, ''), last_name),
    email = COALESCE(NULLIF($3, ''), email)
WHERE id = $4
RETURNING id, first_name, last_name, email
`

type UpdateUserParams struct {
	Column1 interface{}
	Column2 interface{}
	Column3 interface{}
	ID      uuid.UUID
}

type UpdateUserRow struct {
	ID        uuid.UUID
	FirstName string
	LastName  string
	Email     string
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (UpdateUserRow, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.Column1,
		arg.Column2,
		arg.Column3,
		arg.ID,
	)
	var i UpdateUserRow
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
	)
	return i, err
}
