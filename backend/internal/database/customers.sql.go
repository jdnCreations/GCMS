// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: customers.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createCustomer = `-- name: CreateCustomer :one
INSERT INTO customers (id, first_name, last_name, email)
VALUES (
  gen_random_uuid(),
  $1,
  $2,
  $3
)
RETURNING id, first_name, last_name, email
`

type CreateCustomerParams struct {
	FirstName string
	LastName  string
	Email     string
}

func (q *Queries) CreateCustomer(ctx context.Context, arg CreateCustomerParams) (Customer, error) {
	row := q.db.QueryRowContext(ctx, createCustomer, arg.FirstName, arg.LastName, arg.Email)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
	)
	return i, err
}

const deleteCustomerById = `-- name: DeleteCustomerById :exec
DELETE FROM customers where id = $1
`

func (q *Queries) DeleteCustomerById(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteCustomerById, id)
	return err
}

const getAllCustomers = `-- name: GetAllCustomers :many
SELECT id, first_name, last_name, email FROM customers ORDER BY first_name
`

func (q *Queries) GetAllCustomers(ctx context.Context) ([]Customer, error) {
	rows, err := q.db.QueryContext(ctx, getAllCustomers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Customer
	for rows.Next() {
		var i Customer
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.Email,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCustomerById = `-- name: GetCustomerById :one
SELECT id, first_name, last_name, email FROM customers where id = $1
`

func (q *Queries) GetCustomerById(ctx context.Context, id uuid.UUID) (Customer, error) {
	row := q.db.QueryRowContext(ctx, getCustomerById, id)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
	)
	return i, err
}

const updateCustomer = `-- name: UpdateCustomer :one
UPDATE customers 
SET first_name = COALESCE(NULLIF($1, ''), first_name),
    last_name = COALESCE(NULLIF($2, ''), last_name),
    email = COALESCE(NULLIF($3, ''), email)
WHERE id = $4
RETURNING id, first_name, last_name, email
`

type UpdateCustomerParams struct {
	Column1 interface{}
	Column2 interface{}
	Column3 interface{}
	ID      uuid.UUID
}

func (q *Queries) UpdateCustomer(ctx context.Context, arg UpdateCustomerParams) (Customer, error) {
	row := q.db.QueryRowContext(ctx, updateCustomer,
		arg.Column1,
		arg.Column2,
		arg.Column3,
		arg.ID,
	)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
	)
	return i, err
}
